// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    
  password    String
  firstName   String
  lastName    String
  phone       String?
  email       String?
  class       String?
  pickup      Boolean?
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  UserRole       UserRole[]
  Group          Group[] // jake skupiny lektor uci
  StudentGroup   StudentGroup[]
  Attendance     Attendance[]
  Comment        Comment[]
  Replacement    Replacement[]
  CoursesTaught  Course[] @relation("TeacherCourse")
  CoursesTaken   Course[] @relation("StudentCourse") // individualni kurzy
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String

  UserRole UserRole[]
}

model UserRole {
  id       Int @id @default(autoincrement())
  userId   Int
  roleId   Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
}

model Group {
  id        Int    @id @default(autoincrement())
  teacherId Int?
  name      String

  teacher       User?           @relation(fields: [teacherId], references: [id])
  StudentGroup  StudentGroup[]
  Course        Course[]
}

model StudentGroup {
  id        Int       @id @default(autoincrement())
  studentId Int
  groupId   Int
  createdAt DateTime @default(now())
  deletedAt DateTime?

  student User  @relation(fields: [studentId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])
}

model Lesson {
  id         Int      @id @default(autoincrement())
  courseId   Int
  date       DateTime 
  duration   Int

  course          Course          @relation(fields: [courseId], references: [id])
  Attendance      Attendance[]
  StudyMaterial   StudyMaterial[]
  Comment         Comment[]
  OriginalReplacement Replacement[] @relation("OriginalLesson")
  SubstituteReplacement Replacement[] @relation("SubstituteLesson")
}

model Attendance {
  id         Int      @id @default(autoincrement())
  lessonId   Int
  userId     Int
  text       String
  date       DateTime
  type       String

  lesson Lesson @relation(fields: [lessonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model StudyMaterial {
  id            Int      @id @default(autoincrement())
  lessonId      Int
  name          String
  filePath      String
  fileType      String
  uploadedAt    DateTime

  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Comment {
  id           Int      @id @default(autoincrement())
  lessonId     Int
  userId       Int
  text         String
  createdAt    DateTime

  lesson Lesson @relation(fields: [lessonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Replacement {
  id                Int      @id @default(autoincrement())
  originalLessonId  Int
  substituteLessonId Int
  studentId         Int
  date             DateTime
  note             String

  originalLesson   Lesson  @relation("OriginalLesson", fields: [originalLessonId], references: [id])
  substituteLesson Lesson  @relation("SubstituteLesson", fields: [substituteLessonId], references: [id])
  student          User    @relation(fields: [studentId], references: [id])
}

model Course {
  id           Int       @id @default(autoincrement())
  teacherId    Int?
  studentId    Int?
  groupId      Int?
  name         String
  startDate    DateTime
  endDate      DateTime
  description  String?
  textbook     String?
  isIndividual   Boolean
  isPair Boolean?
  createdAt    DateTime @default(now())
  deletedAt    DateTime?

  teacher User?  @relation("TeacherCourse", fields: [teacherId], references: [id])
  student User?  @relation("StudentCourse", fields: [studentId], references: [id])
  group   Group? @relation(fields: [groupId], references: [id])
  Lesson  Lesson[]
}